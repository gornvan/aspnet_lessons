/* 
 * webapi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WeatherForecast
    /// </summary>
    [DataContract]
        public partial class WeatherForecast :  IEquatable<WeatherForecast>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WeatherForecast" /> class.
        /// </summary>
        /// <param name="date">date.</param>
        /// <param name="temperatureC">temperatureC.</param>
        /// <param name="summary">summary.</param>
        public WeatherForecast(DateOnly date = default(DateOnly), int? temperatureC = default(int?), string summary = default(string))
        {
            this.Date = date;
            this.TemperatureC = temperatureC;
            this.Summary = summary;
        }
        
        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateOnly Date { get; set; }

        /// <summary>
        /// Gets or Sets TemperatureC
        /// </summary>
        [DataMember(Name="temperatureC", EmitDefaultValue=false)]
        public int? TemperatureC { get; set; }

        /// <summary>
        /// Gets or Sets TemperatureF
        /// </summary>
        [DataMember(Name="temperatureF", EmitDefaultValue=false)]
        public int? TemperatureF { get; private set; }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [DataMember(Name="summary", EmitDefaultValue=false)]
        public string Summary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WeatherForecast {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  TemperatureC: ").Append(TemperatureC).Append("\n");
            sb.Append("  TemperatureF: ").Append(TemperatureF).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WeatherForecast);
        }

        /// <summary>
        /// Returns true if WeatherForecast instances are equal
        /// </summary>
        /// <param name="input">Instance of WeatherForecast to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WeatherForecast input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.TemperatureC == input.TemperatureC ||
                    (this.TemperatureC != null &&
                    this.TemperatureC.Equals(input.TemperatureC))
                ) && 
                (
                    this.TemperatureF == input.TemperatureF ||
                    (this.TemperatureF != null &&
                    this.TemperatureF.Equals(input.TemperatureF))
                ) && 
                (
                    this.Summary == input.Summary ||
                    (this.Summary != null &&
                    this.Summary.Equals(input.Summary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.TemperatureC != null)
                    hashCode = hashCode * 59 + this.TemperatureC.GetHashCode();
                if (this.TemperatureF != null)
                    hashCode = hashCode * 59 + this.TemperatureF.GetHashCode();
                if (this.Summary != null)
                    hashCode = hashCode * 59 + this.Summary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
